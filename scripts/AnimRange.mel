/*AnimRange.melVersion:  3.0 Author: Ann Mikulka (Ann@Shaba.com) and Sean NolanThanks to Jeff Cooperman who had the idea for this script.Program: Maya 7.0Last mod: 07/07/06Function: AnimRange.mel allows you to define the animation range of an animation in the time slider. A name is given to the range and the start and end frames are entered. The hidden node is created to store the ranges so the animator does not accidently delete it. It stays with the file. This is helpful if thereare multiple shots in the same scene but different animators work on different sections. Instructions: 1. First time running the script a dialogue box will prompt you with how many rows you want.    This can be changed later in the interface.2. The number of rows are added. If you need more rows, use the Add rows command3. To delete a row, click on the trash can4. The Min and Max fields has dragging features available. Holding down contorl and lft-mouse drag will slide the timeline*Note: The first row can not be deleted. Deal with it.*///main procglobal proc AnimRange(){//Build main window if(`window -exists AnimRangeWin`) deleteUI AnimRangeWin;window -mb true -title "Animaton Ranges" AnimRangeWin;  menu -l "Rows";    menuItem -l "Add" -c "addRowRange";  int $create; string $attrs[];  //check to see if the anim node exists if (!`objExists animRangeNode`)   $create = `createRanges`;  //it does so see how many attributes we have. There are 3 attributes per line //row and column format else  {    $attrs = `listAttr -ud animRangeNode`;    int $numOfAttrs = `size($attrs)`;    $create = $numOfAttrs/3;    }    scrollLayout;	columnLayout; 		rowColumnLayout -nc 6 -cw 1 25 -cw 2 100 -cw 3 40 -cw 4 40 -cw 5 65 -cw 6 40 mainCo;				//used to keep track of rows	intField -vis false -v $create numOfRows;	  	text -l ""; text -l ""; 	text -l ""; text -l "";	text -l "";	//labels above the controls	text -l "";	text -l "Name Range";	text -l "Start";	text -l "End";	text -l "Set Range";	text -l "Del";setParent..;	int $i;	//first time running so create the node	if (!`objExists animRangeNode`)	{		 createNode "unknown" -n "animRangeNode";		 select -cl;	}	//create the attributes by how many the user said or when it was last created  for ($i = 0; $i < $create; $i++)	{	 	    if (!`attributeExists $attrs[$i] "animRangeNode"`) {	       createAttributes $i;		               }  }		//Now for the groovy part. Build a dynamic interface based off of ranges needed or by how many  	//attributes were last created. Commands are built dynamically as well so each commnad is represented by  	//an index value. Clever eh?	for ($i = 0; $i < $create; $i++)	{		string $col = ("rwCol" + $i);		rowColumnLayout -nc 6 -cw 1 25 -cw 2 100 -cw 3 40 -cw 4 40 -cw 5 60 -cw 6 30 $col;		text -l "";				string $cmd2 = ("deleteAtt " + $i + " " + $col);						string $ctrl1 = ("IntMin" + $i);		string $ctrl2 = ("IntMax" + $i);		string $ctrl3 = ("txtFldName" + $i);				$fld =`textFieldGrp $ctrl3`;		string $cmd = ("setAttrFields " + $i + " " + $fld);		//textFieldGrp -e -cc $cmd $ctrl3;				string $Min = `intField -width 15 -value 0 -dc $cmd $ctrl1`;						string $Max = `intField -width 15 -value 0 -dc $cmd $ctrl2`;						string $buttonNew = `button -height 20 -label "Set" -command $cmd`;		string $buttonDel = `iconTextButton	-height 20 -image "smalltrash.xpm" -command $cmd2 deleteButton`;			//Pre load all the fields		if (`objExists animRangeNode`)	    {	      	      int $minV = `getAttr ("animRangeNode.Min" + $i)`;	      int $maxV = `getAttr ("animRangeNode.Max" + $i)`;	      string $name = `getAttr ("animRangeNode.Name" + $i)`;	      	      intField -e -value $minV $Min;	      intField -e	-value $maxV $Max;	      textFieldGrp -e -text $name $fld;	      	      connectControl $Min  ("animRangeNode.Min" + $i);	      connectControl $Max  ("animRangeNode.Max" + $i);	    } 				setParent..;			}	setParent..; 	window -e -h 400 -w 340 AnimRangeWin;	showWindow;}//creates $i number of attributesglobal proc createAttributes (int $i){  string $attr1 = ("Name" + $i);	string $attr2 = ("Min" + $i);	string $attr3 = ("Max" + $i);		addAttr -ln $attr1 -dt "string"  animRangeNode;	setAttr -e -keyable false ("animRangeNode." + $attr1);	addAttr -ln $attr2 -at long  animRangeNode;	setAttr -e -keyable false ("animRangeNode." + $attr2);	addAttr -ln $attr3 -at long  animRangeNode;	setAttr -e -keyable false ("animRangeNode." + $attr3);    }//delete attribute and columnglobal proc deleteAtt (int $attr, string $control){    if($attr == 0)      error "First row can not be deleted";   	//From here down, I delete the current attribute	//get a list of all the attributes, give them a temp	//name, and then re-order the index numbers so that	//it matches the number of current rows	int $num = `intField -q -v numOfRows`;	deleteAttr -at ("Min" + $attr) animRangeNode;	deleteAttr -at ("Max" + $attr) animRangeNode;	deleteAttr -at ("Name" + $attr) animRangeNode;	deleteUI $control;	intField -e -v ($num -1) numOfRows;	string $attrs[] = `listAttr -ud animRangeNode`;	string $names[];	string $mins[];	string $maxs[];	int $i = 0;	for($atts in $attrs)	{			int $found = `gmatch $atts "Name*"`;		if($found == 1){		$names[$i] = $atts;		$i++;		}	}		$i = 0;	for($atts in $attrs)	{			int $found = `gmatch $atts "Min*"`;		if($found == 1){		$mins[$i] = $atts;		$i++;		}	}		$i = 0;	for($atts in $attrs)	{			int $found = `gmatch $atts "Max*"`;		if($found == 1){		$maxs[$i] = $atts;		$i++;		}	}		int $j = 0;	for ($i = 0; $i < `size($names)`;$i++)	{		renameAttr ("animRangeNode." + $names[$i]) ("NameTemp" + $i);		renameAttr ("animRangeNode." + $mins[$i]) ("MinTemp" + $i);		renameAttr ("animRangeNode." + $maxs[$i]) ("MaxTemp" + $i);		}		//------------------------------------------------ 	//Rebuild the new attributes	string $newAttrs[] = `listAttr -ud animRangeNode`;		string $newNames[];	string $newMins[];	string $newMaxs[];	$i = 0;		for($newAtts in $newAttrs)	{			int $found = `gmatch $newAtts "NameTemp*"`;		if($found == 1){		$newNames[$i] = $newAtts;		$i++;		}	}		$i = 0;	for($newAtts in $newAttrs)	{			int $found = `gmatch $newAtts "MinTemp*"`;		if($found == 1){		$newMins[$i] = $newAtts;		$i++;		}	}		$i = 0;	for($newAtts in $newAttrs)	{			int $found = `gmatch $newAtts "MaxTemp*"`;		if($found == 1){		$newMaxs[$i] = $newAtts;		$i++;		}	}		for ($i = 0; $i < `size($newNames)`;$i++)	{		renameAttr ("animRangeNode." + $newNames[$i]) ("Name" + $i);		renameAttr ("animRangeNode." + $newMins[$i]) ("Min" + $i);		renameAttr ("animRangeNode." + $newMaxs[$i]) ("Max" + $i);			}	//Reload the interface so that it redraws all the controls	AnimRange;}//dialogue box that pops up the first time you run the script//this prompts for how many rows you wantglobal proc int createRanges(){  string $text; 	string $result = `promptDialog 						-title "Number of Ranges"						-message "Number of Ranges:"						-button "OK" -button "Cancel"						-defaultButton "OK" -cancelButton "Cancel"						-dismissString "Cancel"`;  	if ($result == "OK") { 		$text = `promptDialog -query -text`; 	}  	//cast the string as an int and return it	return int($text);}//this adds a new rowglobal proc addRowRange(){	if (!`objExists animRangeNode`)	{		error "No animRangeNode";	}	//update the row number	int $i = `intField -q -v numOfRows`;		//make the new attributes	string $attr1 = ("Name" + $i);	string $attr2 = ("Min" + $i);	string $attr3 = ("Max" + $i);	addAttr -ln $attr1 -dt "string"  animRangeNode;	setAttr -e -keyable false ("animRangeNode." + $attr1);		addAttr -ln $attr2 -at long  animRangeNode;	setAttr -e -keyable false ("animRangeNode." + $attr2);		addAttr -ln $attr3 -at long  animRangeNode;	setAttr -e -keyable false ("animRangeNode." + $attr3);   	//redraw the interface	AnimRange;}//sets the values from the interface to the attribute and //updates the timelineglobal proc setAttrFields(int $num, string $control){    string $ctrlMin = ("IntMin" + $num);    string $ctrlMax = ("IntMax" + $num);    string $nameField = ("txtFldName" + $num);    int $min=`intField -query -value $ctrlMin`;    int $max=`intField -query	-value $ctrlMax`;    string $name = `textFieldGrp -q -text $control`;    playbackOptions -min $min -max $max;        setAttr -type "string" ("animRangeNode.Name" + $num) $name;    setAttr ("animRangeNode.Min" + $num) $min;    setAttr ("animRangeNode.Max" + $num) $max;}//end script